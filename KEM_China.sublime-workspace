{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"NGprice",
				"NGprice_eqn"
			],
			[
				"NGconne",
				"NGconnecti"
			],
			[
				"NGobj",
				"NGobjval"
			],
			[
				"GT",
				"ELpGTtoCC"
			],
			[
				"temp",
				"temp_arg"
			],
			[
				"fue",
				"fuel-demand"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Equations\n    NGobjective, NGobjectiveFirm(NGi) ,NGcostEqn(NGi), NGprofitEqn(NGi)\n    NGpriceCapSlack(NGm,NGw,r) constraint for the slack variable - diff market price and price cap\n    NGquotaEqn(NGm,NGw,r) constraint enforcing quotas on deliveries when the price is binding\n    NGcaplim(NGi,NGt,NGs,r) gas field production limit\n    NGbldPartner(NGi,NGt,NGs,r) gas field capacity horizon\n    NGsup(NGi,NGw,r) transportation supply balance\n    NGtransCapLim(NGw,NGi,r,rr) transport capacity limit (pipe and trucked lng)\n    NGdem(r) demand equation by market segment\n    NGdem_m(NGm,r)\n    NGliqCaplim(NGi,r) liqueficaiton capacity limit\n    NGtransPricEqn(NGw,NGii,r,rr)\n    NGregasLim(NGi,r) capacity limit for regasification of LNG\n    NGliqueLim(NGi,r) capacity limit for liquefaction of LNG\n    NGimportEqn(NGi,NGw) pipeline import contracts\n    NGsupEnforce(NGm,NGw,r) Demand equation to meet quata levels with no cap under a global system optimization scenario\n    NGdemResponse(NGm,r)\n    NGtransbarrier(NGi,NGii,r,rr)\n    NGprice_eqn(NGm,r)\n;\n**************************************\n* Abstract: Objective function for global optimization\n* Precondition: calculate firm costs\n* Postcondition: Total system costs for natural gas supply\n**************************************\nNGobjective..\n    z =e=\n*    sum(r,NGp(r))\n*    -sum((NGi,NGm,NGw,r),NGsupply(NGi,NGm,NGw,r)*NGp(r))\n    +sum(NGi,NGcosts(NGi))\n*   Add this below if Z is to be considered\n    +sum((NGi,NGm,NGw,r),NGsupply(NGi,NGm,NGw,r)*NGz(NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4))\n;\n**************************************\n* Abstract: Objective function for firm lvel optimization\n* Precondition: Total systesm costs and lost market value if price cap enforced\n* Postcondition: Total systems cost including lost reveneu under price cap (provides firm incentive to switch to devliery modes without price cap)\n**************************************\nNGobjectiveFirm(NGi)..\n    NGobjval(NGi) =e=\n    +sum((NGm,NGw,r),\n        +NGsupply(NGi,NGm,NGw,r)*NGz(NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4))\n    +sum((NGii,NGw,r,rr)$(NGc(NGi,NGw,NGii,r,rr) and ord(NGii)<>ord(NGi) and pipe(NGw)),\n        NGtransP(NGw,NGii,r,rr)*NGtrans(NGi,NGw,NGii,r,rr)\n    )\n    +NGcosts(NGi)\n;\n**************************************\n* Abstract: Firm level profit equation\n* Precondition: Costs, Supply quantities (regular allocated)\n* Postcondition: Total profits\n**************************************\nNGprofitEqn(NGi)..\n    NGprofit(NGi) =e=\n    +sum((NGm,NGw,r),\n       +NGsupply(NGi,NGm,NGw,r)*(DNGdem_m(NGm,r)-NGz(NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4))\n    )\n    +sum((NGii,NGw,r,rr)$(NGc(NGii,NGw,NGi,r,rr) and ord(NGii)<>ord(NGi) and pipe(NGw)),\n        NGtransP(NGw,NGi,r,rr)*NGtrans(NGii,NGw,NGi,r,rr)\n    )\n    -NGcosts(NGi)\n    -sum((NGii,NGw,r,rr)$(NGc(NGi,NGw,NGii,r,rr) and ord(NGii)<>ord(NGi) and pipe(NGw)),\n        NGtransP(NGw,NGii,r,rr)*NGtrans(NGi,NGw,NGii,r,rr)\n    )\n;\n**************************************\n* Abstract: Firm level cost euquation\n* Precondition: All firm activities\n* Postcondition: Total system cost by firm\n**************************************\nNGcostEqn(NGi).. NGcosts(NGi) =e=\n    +sum((NGw,r)$NGiwR(NGi,NGw,r),NGimportPrice(NGi,NGw)*NGimport(NGi,NGw,r))\n    +SUM((r,NGt,NGs)$(NGts(NGt,NGs,r) and NGsD(NGs)),NGcapitalCost(NGt,NGs,r)*NGbld(NGi,NGt,NGs,r))\n    +SUM((r,NGt,NGs,NGw)$(NGts(NGt,NGs,r) and NGtw(NGi,NGt,NGw)),\n            (NGomCost(NGt,NGs,r)+NGliqCost$lng(NGw))*NGop(NGi,NGt,NGs,NGw,r)\n    )\n    +sum((NGii,NGw,r,rr)$NGc(NGii,NGw,NGi,r,rr),\n        NGtransOM(NGw,r,rr)*NGtrans(NGii,NGw,NGi,r,rr)\n    )\n    +sum((NGii,NGw,r,rr)$NGconnect(r,rr),\n        NGtransCapitalCost(r,rr)*NGtransBld(NGii,r,rr)\n    )\n    +sum(r,NGregasCapitalCost(NGi,r)*NGregasBld(NGi,r))\n    +sum(r,NGregasCost*NGregas(NGi,r))\n    +sum(r,NGliqueCapitalCost(NGi,r)*NGbldliq(NGi,r))\n\n;\n**************************************\n* Abstract: Pipeline stransportation value\n* Precondition: Only for regions with predefined connection and for pipelines not owned by firm sending the gas. Reuiqres marginal value (Dual on NGtranscaplim equation)\n* Postcondition: Sets price paid for firms senduing gas on a pipeline\n**************************************\nNGtransPricEqn(NGw,NGii,r,rr)$(NGconnect(r,rr) and pipe(NGw))..\n   NGtransP(NGw,NGii,r,rr) =e=\n*   DNGtranscaplim(NGw,NGii,r,rr)\n   +NGtransOM(NGw,r,rr)*1.08\n;\n**************************************\n* Abstract: Natural gas production constraint\n* Precondition: Exisisting asset capacities owned by each firm\n* Postcondition: Cap on asset produciton\n**************************************================================================\nNGcaplim(NGi,NGt,NGs,r)$NGts(NGt,NGs,r)..\n    NGbld(NGi,NGt,NGs,r)$NGsD(NGs)+NGplateau(NGs,NGt,r)*NGpartner(NGi,NGs)-sum(NGw$NGtw(NGi,NGt,NGw),NGop(NGi,NGt,NGs,NGw,r)) =g= 0\n;\n**************************************\n* Abstract: Plateau for natrual gas field assets\n* Precondition: Predefined production plateau. Non-operational assets (Discovery, Appraisal etc ...)\n* Postcondition: Distribute build activity accross firms\n**************************************===================================================================\nNGbldPartner(NGi,NGt,NGs,r)$(NGts(NGt,NGs,r) and NGsD(NGs))..\n    -NGbld(NGi,NGt,NGs,r) =g=\n    -NGplateau(NGs,NGt,r)*NGpartner(NGi,NGs)\n;\n**************************************\n* Abstract: Liquefaction cosntraint\n* Precondition: Existing regasification capacity\n* Postcondition: Bounded regasification capacity\n**************************************\nNGliqueLim(NGi,r)..\nsum(NGii,NGliqueexist(NGii,r))+NGbldliq(NGi,r) =g=\n sum((NGii,NGt,NGs)$(NGts(NGt,NGs,r) and NGtw(NGi,NGt,'lng')),NGop(NGii,NGt,NGs,'lng',r))\n;\n**************************************\n* Abstract: Regasification cosntraint\n* Precondition: Existing regasification capacity\n* Postcondition: Bounded regasification capacity\n**************************************\nNGregasLim(NGi,r)..\nNGregasexist(NGi,r)+NGregasbld(NGi,r) =g= sum(NGii$(TPA=1 or (ord(NGii)<>ord(NGi))),NGregas(NGii,r))\n;\n**************************************\n* Abstract: Supply balance\n* Precondition:\n* Postcondition: balanced supplies by region and delivery mode (LNG and pipe)\n**************************************\nNGtransbarrier(NGi,NGii,r,rr)$(NGc(NGii,'pipe',NGi,r,rr) and ord(NGi)<>ord(NGii) and  TPA<>1 and not r_offshore(r))..\n    (NGtransexist(NGii,r,rr)+NGtransbld(NGii,r,rr))*0.01\n    -NGtrans(NGi,'pipe',NGii,r,rr)\n    =g=0\n;\n\nNGsup(NGi,NGw,r)..\n    +NGimport(NGi,NGw,r)$NGiwR(NGi,NGw,r)\n    +sum((NGt,NGs)$(NGts(NGt,NGs,r) and NGtw(NGi,NGt,NGw)),NGop(NGi,NGt,NGs,NGw,r)*(1$pipe(NGw)+NGliqYield$lng(NGw)))\n    +sum((NGii,rr)$NGc(NGi,NGw,NGii,rr,r),NGtrans(NGi,NGw,NGii,rr,r)*(1-NGtransLoss*NGtransexistlen(r,rr)))\n    +NGregas(NGi,r)*NGregasYield$pipe(NGw)\n    =g=\n    +NGregas(NGi,r)$lng(NGw)\n    +sum((NGii,rr)$NGc(NGi,NGw,NGii,r,rr),NGtrans(NGi,NGw,NGii,r,rr))\n    +sum(NGm,NGsupply(NGi,NGm,NGw,r)\n*        +NGsupplyQ(NGi,NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4)\n        )\n;\n**************************************\n* Abstract: Transporation capacity limit\n* Precondition: Connected regions\n* Postcondition: total gas tranported by firm i by pipeline\n**************************************\nNGtransCapLim(NGw,NGi,r,rr)$(NGconnect(r,rr) and pipe(NGw))..\n    NGtransexist(NGi,r,rr)+NGtransbld(NGi,r,rr)\n    -sum(NGii$NGc(NGii,NGw,NGi,r,rr),NGtrans(NGii,NGw,NGi,r,rr))\n    =g=0\n;\n**************************************\n* Abstract: Natrual gas demand balance\n* Precondition:\n* Postcondition:\n**************************************\nNGdem(r)..\n    sum((NGm,NGii,ngW),NGsupply(NGii,NGm,NGw,r))\n    =g= sum(NGm,NGdemand(NGm,r))\n;\n**************************************\n* Abstract: Natrual gas demand balance by market segment\n* Precondition:\n* Postcondition:\n**************************************\nNGdem_m(NGm,r)..\n    sum((NGii,NGw),NGsupply(NGii,NGm,NGw,r))\n    =g=\n    +NGdemandV(NGm,r)$(not NGmFixed(NGm))\n    +NGdemand(NGm,r)$NGmFixed(NGm)\n;\n**************************************\n* Abstract: Natrual gas demand response\n* Precondition:\n* Postcondition:\n**************************************\nNGdemResponse(NGm,r)$(not NGmFixed(NGm))..\n    NGdemandV(NGm,r)=e=((NGa(NGm,r)-DNGdem_m(NGm,r))/NGb(NGm,r))$(NGb(NGm,r)>0);\n**************************************\n* Abstract: Complementarity slackness for representing market segements with price cap\n* Precondition: Fuel price flag set to price cap (4)\n* Postcondition: Lost market value resulting from price cap\n**************************************\nNGpriceCapSlack(NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4)..\n    NGz(NGm,NGw,r) =g= NGp(r) - NGpriceCap(NGm,NGw,r)\n;\n\nNGprice_eqn(NGm,r)..\n NGp(r) =g=  DNGdem_m(NGm,r)\n;\n\n*- NGpriceCap(NGm,NGw,r)\n**************************************\n* Abstract: Contractual obligations of natural gas suppliers. Corresponding quantity equation for complemntarity slackeness NGpriceCapSlack\n* Precondition: Fuel price flag set to price cap (4)\n* Postcondition: Enforced supply quotas when price is capped (firm looses market value on these deliveries)\n**************************************\nNGquotaEqn(NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4)..\n -NGsupplyQ(NGm,NGw,r) =g= -sum(NGi,NGquota(NGi,NGm,NGw,r))*0.6\n* -NGsupplyQ(NGm,NGw,r) =g= -sum(NGi,NGquota(NGi,NGm,NGw,r))\n;\n**************************************\n* Abstract: Equation enforces supply obligations if obl;igations are needed\n* Precondition:\n* Postcondition:\n**************************************\nNGsupEnforce(NGm,NGw,r)..\n    sum(NGi$NOC(NGi),NGsupply(NGi,NGm,NGw,r))-NGsupplyQ(NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4)=g=0;\n*    +sum(NGi,NGsupply(NGi,NGm,NGw,r))-NGsupplyQ(NGm,NGw,r)$(NGfuelpflag(NGm,NGw,r)=4)=g=0;\n;\n**************************************\n* Abstract: Natrual gas pipeline import contracts\n* Precondition: Sett the lower bound represeting pipeline improts\n* Postcondition: Enforce minimum imports by pipieline for all suppliers\n**************************************\nNGimportEqn(NGi,NGw)$NGiw(NGi,NGw)..\n    sum(r$NGiwR(NGi,NGw,r),NGimport(NGi,NGw,r)) =g= NGimportContract(NGi,NGw)\n;\n\n********************************************************************************************************\nmodel NGequations\n    /NGcostEqn, NGpriceCapSlack,NGprofitEqn, NGquotaEqn, NGcaplim, NGbldPartner, NGsup,NGdem_m,NGtransbarrier,NGtransCapLim,\n         NGregasLim,NGliqueLim, NGtransPricEqn, NGimportEqn, NGprice_eqn/\n;\nmodel NGglobalmin\n    /NGobjective,NGsupEnforce,NGEquations/\n;\n\n\n*Global optimization problem with imposed quata levels (but not cap)\nmodel NGglobalmin_QL\n    /NGobjective,NGEquations/\n;\n*********************************************************************************************\noption MCP=path\noption NLP=pathnlp\n;\nfile empinfo / '%emp.info%' /;\n\nif(global_LP_Q=1,\n    solve NGglobalmin_QL using NLP minimizing z;\nelse\n*    put empinfo 'DualVar DNGtranscaplim NGtranscaplim ';\n*    put empinfo 'DualVar DNGdem NGdem ';\n    put empinfo 'DualVar DNGdem_m NGdem_m ';\n    put$(priceCapFlag=1) empinfo 'DualVar NGz NGquotaEqn';\n    put$(priceCapFlag=1) empinfo 'DualEqu NGpriceCapSlack NGsupplyQ ';\n    putclose empinfo / 'modeltype mcp'/;\n    NGglobalmin.optfile=1;\n    NGpartner('Other','Panyu 30-1') = 0;\n*    Execute_Loadpoint 'results/reference.gdx';\n    solve NGglobalmin using EMP minimizing z;\n);\n",
			"file": "src/equations/natgasmodel.gms",
			"file_size": 11535,
			"file_write_time": 131647141768946454,
			"settings":
			{
				"buffer_size": 11269,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Equations\n    ELobjective(c)             minimizing cost by country\n\n    ELpurchbal(trun,c)           acumulates all import purchases\n    ELcnstrctbal(trun,c)         accumlates all construction activity\n    ELopmaintbal(trun,c)         accumulates operations and maintenance costs\n\n    ELfcons(ELf,trun,r,c)     balance of fuel use (all types) for power generation\n\n    ELCOcons_fgc(ELp,v,ELl,Els,Elday,trun,r,c) supply of coal for power\n\n    ELfavail(ELf,trun,r,c)       upstream fuel supply constraint\n    ELfavailcr(ELf,trun,r,c)        fuel supply constraint credited\n\n    ELgtconvlim(Elp,v,trun,r,c)  conversion limit for existing OCGT plants\n    ELcapbal(ELp,v,trun,r,c)     capacity balance constraint\n    ELcapavail(ELp,v,trun,r,c)    identity for available capacity\n    ELcaplim(ELp,v,ELl,ELs,ELday,trun,r,c) electricity capacity constraints\n    ELdowntime(ELpd,v,trun,r,c)\n    ELnucconstraint(v,ELl,ELs,Elday,trun,r,c) to force nuclear to operate continuously\n    ELhydutil(ELphyd,v,trun,r,c)       operation of hydro plants\n    ELhydutilsto(trun,r,c)      operation of pumped hydro storage\n    ELupspinres(ELl,ELs,ELday,trun,r,c) up spinning reserve (in case of sudden drop in renewable gen)\n\n    ELsup(ELl,ELs,ELday,trun,r,c)  electricity supply constraints\n\n    ELrsrvreq(ELl,ELs,ELday,trun,r,c) electricity reserve margin\n    ELsolenergybal(ELl,ELs,ELday,trun,r,c) energy balance for solar collection field (CSP)\n    ELstorenergybal(ELl,ELs,ELday,trun,r,c) energy balance for CSP storage mechanism\n    ELstorenergyballast(ELl,ELs,ELday,trun,r,c) energy balance for CSP storage mechanism (last load segement in the day)\n    ELCSPutil(ELl,ELs,ELday,trun,r,c)\n    ELCSPlanduselim(trun,r,c)      To restrict land use to empirical usage per unit capacity\n\n    ELprodreq(ELp,v,trun,c) electricity generation requirement-contracts (not always imposed)\n    ELbldreq(trun,c)\n    ELstorlim(ELp,ELl,ELs,ELday,trun,r,c)\n\n    ELfuelprice_rule(ELf,trun,r,c) Pricing rule for upstream and refinery fuel consumption\n    ELCOprice_rule(f,cv,sulf,trun,r,c) Pricing rule for coal consumption\n\n    /*Flue Gas Controls*/\n    ELfgccaplim(Elpd,v,fgc,trun,r,c) capacity limit on flu gas control\n    ELfgccapmax(ELpd,v,fgc,trun,r,c) maximum installed capacity for fgc\n    ELfgccapbal(ELpd,v,fgc,trun,r,c) FGD capacity balance equation GW\n\n\n    ELfuelcons_trade(ELf,trun,r,c) fuel consumption balance for trade activities\n    ELtradebal(trun,ELl,ELs,ELday,c)  enforces max\n    ELfuelprice_rule_trade(ELf,trun,r,c) Pricing rule for upstream and refinery fuel consumption for trade\n;\n$offorder\n**************************************\n* Abstract: Objective function that computes the cost of buying and revenue of\n*           selling commodities from/to participating sectors.\n* Precondition:\n*               - initializing the integration flag\n*               - initializing the discount factor.\n*               - initializing the functions that set the consumptions of commodities\n*               - Initializing the functions that set the pricing rules\n* Postcondition:\n*               - The function is set with the corresponding cost & revenue functions\n**************************************\nELobjective(c)$integrate('EL',c)..\n    ELobjval(c) =e=\n    (\n        +sum(t, (ELImports(t,c)+ELConstruct(t,c)+ELOpandmaint(t,c))*ELdiscfact(t))\n        /*Upstream fuel cost*/\n        +sum((ELf,t,r)$(rc(r,c)$ELfup(ELf)),\n            Elfuelprice(ELf,t,r,c)*ELdiscfact(t)*(1-subsidy(t)$(partialdereg=1))*ELfconsump(ELf,t,r,c))\n        /*Refined fuel cost*/\n        +sum((ELf,t,r)$(rc(r,c)$ELfref(ELf)),\n            Elfuelprice(ELf,t,r,c)*ELdiscfact(t)*(1-subsidy(t)$(partialdereg=1))*ELRFconsump(ELf,t,r,c))\n        /*Coal supply cost*/\n        +sum((ELf,cv,sulf,t,r)$(rc(r,c)$(ELfCV(ELf,cv,sulf) and ELfcoal(ELf))),\n            ELCOprice(ELf,cv,sulf,t,r,c)*ELdiscfact(t)*(1-subsidy(t)$(partialdereg=1))*ELCOconsump(ELf,cv,sulf,t,r,c))\n        /*Cost purchasing power from water suppliers*/\n        +sum((ELl,ELs,ELday,t,r)$rc(r,c),\n            WApriceEL(ELl,ELs,ELday,t,r,c)*WAdiscfact(t)*WAELsupply(ELl,ELs,ELday,t,r,c)\n        )$integrate('WA',c)\n\n        /*Upstream and refinery fuel trade cost*/\n        +sum((ELf,t,r)$(rc(r,c)$(ELfup(ELf) or ELfref(ELf))),\n            ELfuelprice_trade(ELf,t,r,c)*ELdiscfact(t)*ELfconsump_trade(ELf,t,r,c))\n        /*Water demands revenue*/\n        -sum((ELl,ELs,ELday,t,r)$rc(r,c),\n            WAELprice(ELl,ELs,ELday,t,r,c)*WAdiscfact(t)*WAELconsump(ELl,ELs,Elday,t,r,c)\n        )$integrate('WA',c)\n        /*Transmission demands revenue*/\n        -sum((ELl,ELs,ELday,t,r)$rc(r,c),\n            TRELprice(ELl,ELs,ELday,t,r,c)*TRdiscfact(t)*TRELconsump(ELl,ELs,Elday,t,r,c)\n        )$integrate('TR',c)\n        -sum((f,t,r)$(rc(r,c)$Elf(f)), fcr(f,t,c)*ELfconsumpcr(f,t,r,c))\n    )\n**************************************\n* Abstract: If the sector is excluded from the final model, set the consumptions\n*           of commodities to a previous solution\n**************************************\nloop(c,\n    if(not integrate('EL',c),\n        ELfconsump.fx(ELfup,trun,r,c)$(rc(r,c))=0;\n        ELRFconsump.fx(ELfref,trun,r,c)$(rc(r,c))=0;\n        ELCOconsump.fx(ELf,cv,sulf,trun,r,c)$(rc(r,c))=0;\n        ELfconsump_trade.fx(ELf,trun,r,c)$(rc(r,c))=0;\n    );\n);\n\n*PRIMAL RELATIONSHIPS\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELpurchbal(t,c)$integrate('EL',c)..\n    sum((ELp,v,r)$(rc(r,c)$ELpbld(ELp,v)),\n        ELpurcst(ELp,t,r,c)*(1-(subsidy(t)+gamma_sub(ELp,t))$ELpsub(ELp))*ELbld(ELp,v,t,r,c)\n    )\n    +sum((ELpcoal,v,fgc,r)$(rc(r,c)$(DeSOx(fgc) or DeNOx(fgc))),\n        ELfgcbld(ELpcoal,v,fgc,t,r,c)*EMfgccapexD(fgc,t)\n    )\n    -ELImports(t,c)\n    =e=0\n;\n**************************************\n* Abstract: Construction costs for new capital/equipment and GTtoCC  [USD]\n* Precondition:\n* Postcondition:\n**************************************\nELcnstrctbal(t,c)$integrate('EL',c)..\n    sum((ELp,v,r)$(rc(r,c)$ELpbld(ELp,v)),\n        ELconstcst(ELp,t,r,c)*(1-(subsidy(t)+gamma_sub(ELp,t))$ELpsub(ELp))*ELbld(ELp,v,t,r,c)\n    )\n    -ELConstruct(t,c)\n    =e=0\n;\n**************************************\n* Abstract: Operation and maintenance costs [USD]\n* Precondition:\n* Postcondition:\n**************************************\nELopmaintbal(t,c)$integrate('EL',c)..\n    +sum((Elp,v,ELl,Els,Elday,ELf,r)$(rc(r,c)$ELpELf(ELp,ELf)),\n        ELomcst(Elp,v,r,c)*\n        (\n            ELop(ELp,v,ELl,Els,Elday,ELf,t,r,c)\n            +ELusomfrac*ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)*\n            ELupspincap(Elp,v,ELl,Els,Elday,ELf,t,r,c)$ELpspin(Elp)\n\n        )\n    )\n    +sum((ELp,v,ELl,ELs,ELday,ELf,r)$((rc(r,c) and fMPt(ELf,c))$(ELpELf(ELp,ELf)$(not dummyf(ELf)))),\n        ELomcst(ELp,v,r,c)*ELop_trade(ELp,v,ELl,ELs,ELday,ELf,t,r,c)\n    )\n\n    +sum((ELp,v,ELl,Els,Elday,cv,sulf,sox,nox,r)$(rc(r,c)$(ELpcoal(ELp) and\n            (DeSox(sox) or DeNox(nox)) and ELpfgc(ELp,cv,sulf,sox,nox))),\n        (EMfgcomcst(sox)+EMfgcomcst(nox))*\n        ELCOconsump_fgc(ELp,v,ELl,Els,Elday,cv,sulf,sox,nox,t,r,c)*COcvSCE(cv)/\n        ELfuelburn(ELp,v,'coal',r,c)\n    )\n\n    +sum((ELp,v,r)$(rc(r,c)$(not ELpGTtoCC(ELp))),\n        ELavail(Elp,v,t,r,c)*ELfixedOMcst(ELp,t)\n    )\n\n    +sum((ELpcoal,v,fgc,r)$(rc(r,c)$(DeSOx(fgc) or DeNOx(fgc))),\n        ELfgcbld(ELpcoal,v,fgc,t,r,c)*EMfgcfixedOMcst(fgc)\n    )\n    +sum((ELstorage,ELl,ELs,ELday,r)$rc(r,c),\n        ELstoromcst(ELstorage,r,c)*ELheatstorage(ELl,ELs,ELday,t,r,c)\n    )\n    -ELOpandmaint(t,c)\n    =e=0\n;\n**************************************\n* Abstract: fuel consumption, fuel burning  is indepednadnt of sulfur content\n*           this needs to be updated!!!\n* Precondition:\n* Postcondition:\n**************************************\nELfcons(ELf,t,r,c)$((rc(r,c) and not dummyf(ELf))$integrate('EL',c))..\n    ELfconsump(ELf,t,r,c)$ELfup(ELf)\n    +ELRFconsump(ELf,t,r,c)$ELfref(ELf)\n    +sum((cv,sulf)$ELfCV(ELf,cv,sulf),\n        ELCOconsump(ELf,cv,sulf,t,r,c)*COcvSCE(cv)\n    )$ELfcoal(ELF)\n    -sum((ELpd,v,ELl,Els,Elday)$(ELpELf(ELpd,ELf)),\n        ELfuelburn(ELpd,v,ELf,r,c)*(\n            ELop(ELpd,v,ELl,Els,Elday,ELf,t,r,c)\n            +ELupspincap(Elpd,v,ELl,Els,Elday,ELf,t,r,c)\n            *ELusrfuelfrac*ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)$ELpspin(Elpd)\n            /*+ELlchours(ELl,c)*ELoploc(ELpd,v,ELl,Els,Elday,ELf,t,r,c)$(not ELpnuc(ELpd))*/\n         )\n    )\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELfuelcons_trade(ELf,t,r,c)$((rc(r,c) and fMPt(ELf,c))$integrate('EL',c))..\n    ELfconsump_trade(ELf,t,r,c)\n    -sum((ELpd,v,ELl,ELs,ELday)$(ELpELf(ELpd,ELf)$(not ELpGTtoCC(ELpd) and not dummyf(ELf))),\n        ELfuelburn(ELpd,v,ELf,r,c)*ELop_trade(ELpd,v,ELl,ELs,ELday,ELf,t,r,c))\n    =g=0\n;\n\nELtradebal(t,ELl,ELs,ELday,c)$((call(c))$integrate('EL',c))..\n    /*from power sector*/\n    sum((ELpd,v,ELf,r)$(rc(r,c) and fMPt(ELf,c) and ELpELf(ELpd,ELf)$(not dummyf(ELf))),\n        ELop_trade(ELpd,v,ELl,ELs,ELday,ELf,t,r,c))\n    sum((ELpsw,v,ELf,r)$(rc(r,c) and fMPt(ELf,c) and ELpELf(ELpd,ELf) and rentrade=1),\n        ELop_trade(ELpsw,v,ELl,ELs,ELday,ELf,t,r,c))\n\n    /* renewables */\n    /*+sum((ELps,v,r)$(rc(r,c) and (rentrade=1)),*/\n    /*    ELsolop(ELps,v,ELl,ELs,ELday,t,r,c))*/\n    /*+sum((ELpw,v,r)$(rc(r,c) and (rentrade=1)),*/\n    /*    ELwindop(ELpw,v,ELl,ELs,ELday,t,r,c))*/\n\n    /*from water sector*/\n    +sum((WApF,v,WAf,r)$(rc(r,c) and fMPt(WAf,c) and WAfuelburn(WApF,v,WAf,r,c)>0),\n        WAFop_trade(WApF,v,WAf,t,r,c)*ELlcnorm(ELl,c)*ELnormdays(ELs,ELday))\n    +sum((WApV,v,WAf,opm,r)$(rc(r,c) and fMPt(WAf,c) and WAVfuelburn(WApV,v,WAf,opm,r,c)>0),\n        WAVop_trade(WApV,v,ELl,ELs,ELday,WAf,opm,t,r,c))\n    -ELtrademax(t,ELl,ELs,ELday,c)\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELCOcons_fgc(ELpcoal,v,ELl,Els,Elday,t,r,c)$(rc(r,c)$integrate('EL',c) and ELpon(ELpcoal))..\n    +sum((cv,sulf,sox,nox)$ELpfgc(Elpcoal,cv,sulf,sox,nox),\n        ELCOconsump_fgc(ELpcoal,v,ELl,Els,Elday,cv,sulf,sox,nox,t,r,c)*COcvSCE(cv)\n    )\n    -sum(ELf$ELpELf(ELpcoal,ELf),\n        ELfuelburn(ELpcoal,v,ELf,r,c)*\n        (\n            ELop(ELpcoal,v,ELl,Els,Elday,ELf,t,r,c)\n            +ELupspincap(Elpcoal,v,ELl,Els,Elday,ELf,t,r,c)*\n            ELusrfuelfrac*ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)$(ELpspin(Elpcoal))\n            /*+ELlchours(ELl,c)* */\n            /*ELoploc(ELpcoal,v,ELl,Els,Elday,ELf,t,r,c)*/\n        )\n    )\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELfavail(ELf,t,r,c)$(rc(r,c)$((ELfuelpflag(ELf,c)=2)$integrate('EL',c)))..\n    -(\n        ELfconsump(ELf,t,r,c)$ELfup(ELf)\n        +ELRFconsump(ELf,t,r,c)$ELfref(ELf)\n        +sum((cv,sulf)$ELfCV(ELf,cv,sulf),\n            ELCOconsump(ELf,cv,sulf,t,r,c)*COcvSCE(cv)\n        )$ELfcoal(ELF)\n    )\n    =g=-ELfconsumpmax(ELf,t,r,c)\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELfavailcr(ELf,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    /*+sum((cv,sulf)$ELfCV(Elf,cv,sulf),ELCOconsump(ELfcoal,cv,sulf,t,r,c))$ELfcoal(ELf)*/\n    ELfconsump(ELf,t,r,c)$ELfup(ELf)\n    +ELRFconsump(ELf,t,r,c)$ELfref(ELf)\n    +sum((cv,sulf)$ELfCV(ELf,cv,sulf),\n        ELCOconsump(ELf,cv,sulf,t,r,c)*COcvSCE(cv)\n    )$ELfcoal(ELF)\n    -ELfconsumpcr(ELf,t,r,c)\n    =g= 0\n;\n**************************************\n* Abstract: CAPACITIES, balance of existing, additional, and future capacity [GW]\n* Precondition:\n* Postcondition:\n**************************************\nELcapbal(ELp,v,t,r,c)$(rc(r,c)$((not ELpGTtoCC(Elp))$integrate('EL',c)))..\n    ELavail(ELp,v,t,r,c)\n    -ELexistcp(ELp,v,t+1,r,c)\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELcapavail(ELp,v,t,r,c)$(rc(r,c)$((not ELpGTtoCC(Elp))$integrate('EL',c)))..\n    (\n        ELexistcp(ELp,v,t,r,c)\n        +ELaddition(ELp,v,t,r,c)\n        -ELretirement(ELp,v,t,r,c)\n        +sum(Elpp$ELpbld(Elpp,v),ELcapadd(Elpp,ELp)*ELbld(Elpp,v,t,r,c))$( t_ind(t) > ELleadtime(ELp))\n    )*(1-PVdegrade(r,c)$ELppv(ELp))\n   =e=ELavail(ELp,v,t,r,c)\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELcaplim(ELp,v,ELl,ELs,ELday,t,r,c)$(rc(r,c)$((not ELpGTtoCC(ELp))$integrate('EL',c)))..\n    ELavail(ELp,v,t,r,c)*ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)*\n        (1$(ELpd(ELp) or ELpcsp(Elp))\n            +ELdiffGWwind(ELl,ELs,r,c)$ELpw(ELp)+ELdiffGWsol(ELl,ELs,r,c)$ELppv(Elp)\n        )\n    /*create dummy fuel for renewables*/\n    /*verify*/\n    -sum(ELf$ELpELf(ELp,ELf),\n        ELop(ELp,v,ELl,Els,Elday,ELf,t,r,c)\n        +ELupspincap(Elp,v,ELl,Els,Elday,ELf,t,r,c)*ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)$Elpspin(Elp)\n        /*+ELlchours(ELl,c)*ELoploc(ELp,v,ELl,Els,Elday,ELf,t,r,c)$(not ELpnuc(ELp))*/\n    )\n    -sum(ELf$(ELpELf(ELp,ELf)$(not dummyf(ELf)) and fMPt(ELf,c)),\n        ELop_trade(ELp,v,ELl,ELs,ELday,ELf,t,r,c)\n    )\n    =g=0\n;\n**************************************\n* Abstract: Maximum capacity factor for dispatchable plants with maintenance downtime\n* Precondition: ELmaxcapfactor must be > 0 for constraint to apply\n* Postcondition: Outputs the limit on aggregate electricity production\n**************************************\n*TODO: Check why this equation is excluded from the model\nELdowntime(ELpd,v,t,r,c)$((rc(r,c) and ELmaxcapfactor(ELpd)>0)$integrate('EL',c))..\n    ELmaxcapfactor(ELpd)*ELavail(ELpd,v,t,r,c)*sum((ELl,ELs,Elday),ELlchours(ELl,c)*ELdaysinseason(ELs,ELday))\n    -sum((ELl,ELs,Elday,ELf)$ELpELf(ELpd,ELf),\n        ELop(ELpd,v,ELl,Els,Elday,ELf,t,r,c))\n    -sum((ELl,ELs,Elday,ELf)$(ELpELf(ELpd,ELf)$(not dummyf(ELf)) and fMPt(ELf,c)),\n        ELop_trade(ELpd,v,ELl,ELs,ELday,ELf,t,r,c)\n    )\n    =g=0\n;\n**************************************\n* Abstract: To ensure that remaining convertible capacity can be positive in\n*           the last period\n* Precondition:\n* Postcondition:\n**************************************\nELgtconvlim(ELpgttocc,vo,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    -ELgttocc(ELpgttocc,vo,t+1,r,c)\n    -ELbld(ELpgttocc,vo,t,r,c)$ELpbld(ELpgttocc,vo)\n    +ELgttocc(ELpgttocc,vo,t,r,c)\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELhydutil(ELphyd,v,t,r,c)$(rc(r,c)$((not ELphydsto(ELphyd))$integrate('EL',c)))..\n    ELhydhrs(r,c)*ELavail(ELphyd,v,t,r,c)\n    -sum((ELl,Els,Elday,ELf)$ELpELf(ELphyd,ELf),\n        ELop(ELphyd,v,ELl,Els,Elday,ELf,t,r,c)\n    )\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELhydutilsto(t,r,c)$(rc(r,c)$integrate('EL',c))..\n   sum((ELl,Els,Elday),ELhydopsto(ELl,Els,Elday,t,r,c))*ELhydstoeff\n   -sum((Elphyd,v,ELl,Els,Elday,ELf)$(ELpELf(ELphyd,ELf) and ELphydsto(ELphyd)),\n        ELop(ELphyd,v,ELl,Els,Elday,ELf,t,r,c)\n    )\n   =g=0\n;\n**************************************\n* Abstract: Requirement to operate nuclear plants continuously:\n* Precondition:\n*               - nuclear set as base load supplier [GWh]\n* Postcondition:\n**************************************\nELnucconstraint(v,ELl,ELs,ELday,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    ELop('nuclear',v,ELl,ELs,ELday,'u-235',t,r,c)\n    -sum((ELll,ELss,Eldayy),ELop('nuclear',v,ELll,ELss,ELdayy,'u-235',t,r,c))*\n        ELlcnorm(ELl,c)*ELnormdays(ELs,ELday)\n    =g=0\n;\n**************************************\n* Abstract: SPINNING RESERVES\n* Precondition:\n* Postcondition:\n**************************************\nELupspinres(ELl,ELs,ELday,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    -ELsolspin*sum((ELppv,clc,v),ELccfrac(r,c,clc)*ELsolopfrac(ELppv,clc)*ELop(ELppv,v,ELl,Els,Elday,'dummyf',t,r,c)*(1-ELparasitic(ELppv,v)))\n    -ELwindspin*sum((ELpw,v),ELop(ELpw,v,ELl,Els,Elday,'dummyf',t,r,c)*(1-ELparasitic(Elpw,v)))\n    +sum((ELpd,v,ELf)$(ELpELf(ELpd,ELf) and ELpspin(ELpd)),\n        ELupspincap(ELpd,v,ELl,Els,Elday,ELf,t,r,c)*ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)*(1-ELparasitic(Elpd,v))\n    )\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELsolenergybal(ELl,ELs,Elday,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    (1-ELCSPtransloss)*ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)*ELdirectirradiance(ELl,ELs,r,c)*ELCSPlandarea(t,r,c)\n    -ELheatstorin(ELl,ELs,Elday,t,r,c)\n    -ELheatinstant(ELl,ELs,ELday,t,r,c)$(ELsolcurve(ELl,ELs,r,c)>=ELminDNI)\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELstorenergybal(ELl,ELs,ELday,t,r,c)$(rc(r,c)$((ord(ELl)<card(ELl))$integrate('EL',c)))..\n    ((1-ELstorehrloss)**ELlchours(ELl,c))*ELheatstorage(ELl,ELs,ELday,t,r,c)\n    +(1-ELstorecycloss)*ELheatstorin(ELl,ELs,ELday,t,r,c)\n    -ELheatstorout(ELl,ELs,ELday,t,r,c)\n    -ELheatstorage(ELl+1,ELs,ELday,t,r,c)\n    =e=0\n;\n**************************************\n* Abstract: to connect the hourly curves from preceeding days:\n* Precondition:\n* Postcondition:\n**************************************\nELstorenergyballast(ELl,ELs,ELday,t,r,c)$(rc(r,c)$((ord(ELl)=card(ELl))$integrate('EL',c)))..\n    ((1-ELstorehrloss)**ELlchours(ELl,c))*ELheatstorage(ELl,ELs,ELday,t,r,c)\n    +(1-ELstorecycloss)*ELheatstorin(ELl,ELs,ELday,t,r,c)\n    -ELheatstorout(ELl,ELs,ELday,t,r,c)\n    -ELheatstorage('L1',ELs,ELday,t,r,c)\n    =e=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELCSPutil(ELl,ELs,ELday,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    ELCSPthermaleff*(ELheatstorout(ELl,ELs,ELday,t,r,c)\n        +ELheatinstant(ELl,ELs,ELday,t,r,c)$(ELsolcurve(ELl,ELs,r,c)>=ELminDNI))\n    -sum((ELpcsp,v),ELop(ELpcsp,v,ELl,Els,Elday,'dummyf',t,r,c))\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELCSPlanduselim(t,r,c)$(rc(r,c)$integrate('EL',c))..\n    -ELCSPlandarea(t,r,c)+sum((ELPcsp,v),ELavail(ELpcsp,v,t,r,c))\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELstorlim(ELpcsp,ELl,ELs,ELday,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    sum(v,ELavail(ELpcsp,v,t,r,c))*CSPstoragehours/ELCSPthermaleff*\n    ELdaysinseason(ELs,ELday)\n    -ELheatstorage(ELl,ELs,ELday,t,r,c)\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELprodreq(ELp,v,t,c)$((vn(v) and ELprodlow(ELp,t,c) > 0)$integrate('EL',c))..\n    sum((ELl,ELs,ELday,Elf,r)$(rc(r,c)$ELpELf(ELp,ELf)),\n        ELop(ELp,v,ELl,Els,Elday,ELf,t,r,c)\n    )\n    =g=ELprodlow(ELp,t,c)\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELbldreq(t,c)$integrate('EL',c)..\n    sum((r,v)$(rc(r,c)$vn(v)),\n        sum(ELpnuc$ELpbld(Elpnuc,v),ELbld(ELpnuc,v,t,r,c))\n        +sum(ELpsw$ELpbld(ELpsw,v),ELbld(ELpsw,v,t,r,c))\n    )\n    =g=ELbldlow(t,c)\n;\n**************************************\n* Abstract: WAELconsump (hybrid RO) is assumed to take directly from supply, bypassing the grid\n* Precondition:\n* Postcondition:\n**************************************\nELsup(ELl,ELs,ELday,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    sum((ELp,v,ELf)$ELpELf(ELp,ELf),\n        ELop(ELp,v,ELl,Els,Elday,ELf,t,r,c)*(1-ELparasitic(Elp,v))\n    )\n    +sum((ELp,v,ELf)$((fMPt(ELf,c) and ELpELf(ELp,ELf))$(not ELpGTtoCC(ELp) and not dummyf(ELf))),\n        ELop_trade(ELp,v,ELl,ELs,ELday,ELf,t,r,c)*(1-ELparasitic(Elp,v))\n    )\n    +sum((ELpcoal,v,cv,sulf,SOx,NOx)$(ELpfgc(Elpcoal,cv,sulf,SOx,NOx) and\n            (DeSOx(sox) or DeNOx(nox))),\n        ELCOconsump_fgc(ELpcoal,v,ELl,Els,Elday,cv,sulf,SOx,NOx,t,r,c)*COcvSCE(cv)*\n        ELpCOparas(Elpcoal,v,sulf,SOx,NOx,r,c)\n    )\n    +WAELsupply(ELl,ELs,ELday,t,r,c)\n    -WAELconsump(ELl,ELs,ELday,t,r,c)\n    -TRELconsump(ELl,ELs,ELday,t,r,c)\n    =g=0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELrsrvreq(ELl,ELs,ELday,t,r,c)$(rc(r,c)$integrate('EL',c))..\n    sum((Elp,v),\n         Elavail(ELp,v,t,r,c)$Elpd(ELp)\n        +CSPreservecontr*Elavail(ELp,v,t,r,c)$ELpcsp(ELp)\n    )\n    +WAELrsrvcontr(t,r,c)\n    =g=\n    ELreserve*\n    (ELlcgw(ELl,ELs,ELday,r,c)*ELdemgro(t,r,c)\n        +(WAELconsump(ELl,ELs,ELday,t,r,c)/(ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)))\n        +(TRELconsump(ELl,ELs,ELday,t,r,c)/(ELlchours(ELl,c)*ELdaysinseason(ELs,ELday)))\n    )\n;\n**************************************\n* Abstract: Capacity limit on the operation of FGD\n* Precondition:\n* Postcondition:\n**************************************\nELfgccaplim(ELpd,v,fgc,t,r,c)$(rc(r,c)$(((DeSOx(fgc) or DeNOx(fgc)) and ELpcoal(ELpd))$integrate('EL',c)))..\n    +sum(ELl,ELlchours(ELl,c))*sum((ELs,ELday),ELdaysinseason(ELs,Elday))*(\n        ELfgcexistcp(ELpd,v,fgc,t,r,c)\n        +ELfgcbld(ELpd,v,fgc,t-ELfgcleadtime(fgc),r,c)\n    )\n    -sum((ELl,Els,Elday,cv,sulf,nox)$(ELpfgc(Elpd,cv,sulf,fgc,nox)),\n        ELCOconsump_fgc(ELpd,v,ELl,Els,Elday,cv,sulf,fgc,nox,t,r,c)*COcvSCE(cv)/ELfuelburn(ELpd,v,'coal',r,c)\n    )$DeSOx(fgc)\n\n    -sum((ELl,Els,Elday,cv,sulf,sox)$(ELpfgc(Elpd,cv,sulf,sox,fgc)),\n        ELCOconsump_fgc(ELpd,v,ELl,Els,Elday,cv,sulf,sox,fgc,t,r,c)*COcvSCE(cv)/ELfuelburn(ELpd,v,'coal',r,c)\n    )$DeNOx(fgc)\n    =g= 0\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELfgccapmax(ELpd,v,fgc,t,r,c)$(rc(r,c)$((ELpcoal(ELpd) and (DeSOx(fgc) or DeNOx(fgc)))$integrate('EL',c)))..\n    ELavail(ELpd,v,t,r,c)\n    -ELfgcexistcp(ELpd,v,fgc,t,r,c)\n    -ELfgcbld(ELpd,v,fgc,t-ELfgcleadtime(fgc),r,c)\n    =g= 0\n;\n**************************************\n* Abstract: balance of existing, additional, and future capacity [GW]\n* Precondition:\n* Postcondition:\n**************************************\nELfgccapbal(ELpd,v,fgc,t,r,c)$(rc(r,c)$((ELpcoal(ELpd) and (DeSOx(fgc) or DeNOx(fgc)))$integrate('EL',c)))..\n    ELfgcexistcp(ELpd,v,fgc,t,r,c)\n    +ELfgcbld(ELpd,v,fgc,t-ELfgcleadtime(fgc),r,c)\n    -ELfgcexistcp(ELpd,v,fgc,t+1,r,c)\n    =g=0\n;\n**************************************\n* Abstract: Pricing rule for fuel consumption. It sets the price of both upstream\n*           and refinery based on pricing rule flags.\n* Precondition:\n*               - Initializing the pricing rule flags\n*               - Loading the data for the administered prices\n* Postcondition:\n*               - The fuel price is either set to the marginal value of that fuel\n*                   or an administered price.\n**************************************\nELfuelprice_rule(ELf,t,r,c)$(rc(r,c)$((ELfup(ELf) or ELfref(ELf))$integrate('EL',c)))..\n    ELfuelprice(ELf,t,r,c)\n    =e=(\n        DUPdem_l(ELf,t,r,c)$ELfup(ELf)\n        +DRFdem_l(ELf,t,r,c)$ELfref(ELf)\n    )$(ELfuelpflag(ELf,c)=1)\n    +ELAPf(ELf,t,r,c)$(ELfuelpflag(ELf,c)=2)\n;\n**************************************\n* Abstract:\n* Precondition:\n* Postcondition:\n**************************************\nELfuelprice_rule_trade(ELf,t,r,c)$(rc(r,c)$((ELfup(ELf) or ELfref(ELf))$integrate('EL',c)))..\n    ELfuelprice_trade(ELf,t,r,c)\n    =e=(DUPdem_l(ELf,t,r,c)$ELfup(ELf)+DRFdem_l(ELf,t,r,c)$ELfref(ELf))\n;\n**************************************\n* Abstract: Pricing rule for coal consumption. It sets the price based on\n*           pricing rule flags.\n* Precondition:\n*               - Initializing the pricing rule flags\n*               - Loading the data for the administered prices\n* Postcondition:\n*               - The coal price is either set to the marginal value of that\n*                   coal or an administered price.\n**************************************\nELCOprice_rule(ELf,cv,sulf,t,r,c)$(rc(r,c)$((ELfCV(ELf,cv,sulf) and ELfcoal(ELf))$integrate('EL',c)))..\n    ELCOprice(ELf,cv,sulf,t,r,c)\n    =e=COprice(ELf,cv,sulf,t,r,c)$(ELfuelpflag(ELf,c)=1)\n    +ELAPf(ELf,t,r,c)*COcvSCE(cv)$(ELfuelpflag(ELf,c)=2)\n;\n\nmodel powerModel /\n    ELobjective\n    ,ELopmaintbal\n    ,ELpurchbal\n    ,ELcnstrctbal\n    ,ELcaplim\n    ,ELnucconstraint\n    ,ELrsrvreq\n    ,ELcapbal\n    ,ELcapavail\n*    ,ELdowntime\n    ,ELgtconvlim\n    ,ELsup\n    ,ELfcons\n\n    ,ELCOcons_fgc\n    ,ELfavail\n    ,ELfavailcr\n    ,ELupspinres\n    ,ELstorenergyballast\n    ,ELsolenergybal\n    ,ELstorenergybal\n    ,ELCSPutil\n    ,ELstorlim\n    ,ELbldreq\n    ,ELCSPlanduselim\n    ,ELprodreq\n    ,ELhydutil\n    ,ELhydutilsto\n    ,ELfgccaplim\n    ,ELfgccapmax\n    ,ELfgccapbal\n\n    ,ELfuelprice_rule\n    ,ELCOprice_rule\n\n    ,ELfuelcons_trade\n    ,ELtradebal\n    ,ELfuelprice_rule_trade\n/\n",
			"file": "src/equations/power.gms",
			"file_size": 25446,
			"file_write_time": 131648086347513808,
			"settings":
			{
				"buffer_size": 24934,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "parameters\n    NGpriceCap(NGm,NGw,r) price caps in million USD per BCM\n        /\n$INCLUDE build/data/NGpriceCap.inc\n        /\n    NGomCost(NGt,NGs,r) marginal production cost in $ per cm\n        /\n$INCLUDE build/data/NGomCost.inc\n        /\n    NGcapitalCost(NGt,NGs,r) annualzied investment cost for each field\n        /\n$INCLUDE build/data/NGcapitalCost.inc\n        /\n    NGpartner(NGi,NGs) partern shares in each asset NGs\n        /\n$INCLUDE build/data/NGpartner.inc\n        /\n    NGtransexist(NGi,r,rr) pipeline capacity\n        /\n$INCLUDE build/data/NGtransexist.inc\n        /\n* Fix duplicate values (need average length)\n    NGtransexistlen(r,rr) pipeline length\n        /\n$INCLUDE build/data/NGtransexistlen.inc\n        /\n    NGregasexist(NGi,r) natural gas regasification infrastructure\n        /\n$INCLUDE build/data/NGregasexist.inc\n        /\n    NGplateau(NGs,NGt,r) production horizon for each field\n        /\n$INCLUDE build/data/NGplateau.inc\n        /\n    NGlifetime(NGt,NGs,r) production lifetime for each asset\n        /\n$INCLUDE build/data/NGlifetime.inc\n        /\n    NGregasCapitalCost(NGi,r)\n        /\n$INCLUDE build/data/NGregasCapitalCost.inc\n        /\n    NGdemand(NGm,r) fixed gas demand in each region\n        /\n$INCLUDE build/data/NGdemand.inc\n        /\n    NGquota(NGi,NGm,NGW,r) supply quotas when price cap is binding\n        /\n$INCLUDE build/data/NGquota.inc\n        /\n    NGprod2015(r) supply quotas when price cap is binding\n        /\n$INCLUDE build/data/NGprod2015.inc\n        /\n    NGfuelpflag(NGm,NGw,r)\n    NGtransOM(NGw,r,rr)\n* TO-DO: Update transport costs per km\n    NGtransCost(NGw) marginal transportation cost mm$ per bcm per km\n        /\n            pipe    0.002103\n            LNG     0.0118\n        /\n    NGtransCapitalCost(r,rr)\n    NGimportContract(NGi,NGw) Fixed Pipeline Import contracts\n        /\n            CNPC.pipe   34.86\n            CNPC.lng    6.03\n            CNOOC.lng   18.46\n            Sinopec.lng 2.186\n            Other.lng   0.5244\n        /\n    NGimportPrice(NGi,NGw) natural gas import price mm$ per bcm for contracts\n        /\n            CNPC.pipe  285.8\n            CNPC.lng 379.3\n            CNOOC.lng 273.3\n            Sinopec.lng 397.3\n            Other.lng 349.9\n        /\n   NGliqueexist(NGi,r) liquefaction existing capacity\n        /\n$INCLUDE build/data/NGliqueexist.inc\n        /\n   NGliqueCapitalCost(NGi,r) liquefaction cost\n        /\n$INCLUDE build/data/NGliqueCapitalCost.inc\n        /\n    NGdemLNG(r)\n        /\nBeijing 0.804747537\nTianjin 0.435287622\nHebei   1.489141865\nShanxi  3.092833104\n'Inner Mongolia' 1.935884424\nLiaoning    1.248588179\nJilin   0.019091562\nHeilongjiang    0\nShanghai    0.30928331\nJiangsu 3.833585724\nZhejiang    0.007636625\nAnhui   1.88242805\nFujian  0.580383496\nJiangxi 0\nShandong    1.917525978\nHenan   2.733911731\nHubei   2.707183544\nHunan   0.749275093\nGuangdong   1.176040242\nGuangxi 0.301646685\nHainan  1.023307743\nChongqing   2.88664423\nSichuan 2.23753111\nGuizhou 0.534563746\nYunnan  0\nShaanxi 1.245182244\nGansu   1.069127493\nQinghai 0.731359571\nNingxia 1.240951554\nXinjiang    3.806857536\n        /\n    NGa(NGm,r) intercept of inverse demand curve\n    NGb(NGm,r) slope of the inverse demand curve\n    NGe(NGm,r) price elasticity\n;\n*   Re-scale demand to match 191.5 based on SIA data\n    NGdemand(NGm,r)=NGdemand(NGm,r)*0.958;\n    NGdemand(NGm,'Heilongjiang')= NGdemand(NGm,'Heilongjiang')/0.94;\n    NGdemand(NGm,'Shaanxi')= NGdemand(NGm,'Shaanxi')/0.958;\n    NGdemand('CityGate','Qinghai')= NGdemand('CityGate','Qinghai')*0.92;\n\n* Rescale quota for city gate to make room for more unregualted LNG supplies (at least 18)\n    NGquota(NGi,'CityGate','pipe',r)$(sum(NGii,NGquota(NGii,'CityGate','pipe',r))>0) =\n    NGquota(NGi,'CityGate','pipe',r)/sum(NGii,NGquota(NGii,'CityGate','pipe',r))*\n    (NGdemand('CityGate',r) - 10*NGdemand('CityGate',r)/sum(rr,NGdemand('CityGate',rr)))\n;\n\n    NGdemand(NGm,r)$(NGdemand(NGm,r)<1e-4 and sum(NGmm,NGdemand(NGm,r))>0) = 1e-4;\n*Qinghai\n\n    NGimportPrice(NGi,lng) = 410;\n    NGiwR(NGi,\"pipe\",\"Imports Asia\")$(NGimportPrice(NGi,'pipe')>0)=yes;\n    NGiwR(NGi,\"lng\",r)$(NGimportPrice(NGi,'lng')>0 and NGrILng(r))=yes;\n*   enforce contracts to pipeline imports only\n\n\n    loop(r,NGiw(NGi,pipe)$NGiwR(NGi,pipe,r)=yes);\n\n*   convert from % to frac\n    NGpartner(NGi,NGs)=NGpartner(NGi,NGs)/100;\n*   assume CMM and CBM are owned and oeprated by other suppliers\n    loop(r,NGpartner('Other',NGs)$NGts(\"CBM\",NGs,r)=1);\n    loop(r,NGpartner('Other',NGs)$NGts(\"CMM\",NGs,r)=1);\n    NGtransCapitalCost(r,rr)=0;\nscalar\n    NGliqCost additional cost for liquifying gas in USD per kcm /41/\n    NGregasCost regasification operationg cost USD per kcm /15/\n    NGtransLoss percent loss when transporting gas per km /0.00002/\n    NGregasYield percent loss for regasificatino and injection /0.986/\n    NGliqYield yield for liquefaction processes /0.88/\n;\n\n*   Calibration 2015 production\n    NGprod2015('Tianjin')=0;\n    NGprod2015('Shandong')=0;\n    NGprod2015('Guangdong')=0;\n    NGprod2015('Hebei')=0;\n    NGprod2015('Hainan')=0;\n    NGplateau(NGs,NGt,r)$(NGprod2015(r)>0 and sum((NGss,NGtt),NGplateau(NGss,NGtt,r))>0)\n    = NGplateau(NGs,NGt,r)*NGprod2015(r)/sum((NGss,NGtt),NGplateau(NGss,NGtt,r))\n;\n*   CMM is considered free gas.\n    NGomCost('CMM',NGs,r)$NGts('CMM',NGs,r)=0\n;\n    NGomCost('CBM',NGs,r)$NGts('CBM',NGs,r)=79.7\n;\n    NGcapitalCost('CMM',NGs,r)=0\n;\n    NGcapitalCost(NGt,NGs,r)=NGcapitalCost(NGt,NGs,r)\n;\n* Drop VAT from import prices\n    NGpriceCap('Chemical','pipe',r)=136.4804/1.13\n;\n    NGpriceCap('CityGate','pipe',r)=NGpriceCap('CityGate','pipe',r)/1.13\n;\n    NGomCost(NGt,NGs,r)=NGomCost(NGt,NGs,r);\n;\n    NGtransexistlen(r,rr)$(NGtransexistlen(rr,r)>NGtransexistlen(r,rr)) = NGtransexistlen(rr,r)\n;\n    NGtransOM(NGw,r,rr)=NGtransCost(NGw)*NGtransexistlen(r,rr)\n;\n    NGe(NGm,r) = 0.516\n;\n    NGb(NGm,r)$(NGdemand(NGm,r)>0) = NGpriceCap(NGm,'pipe',r)*0.6/NGdemand(NGm,r)/NGe(NGm,r)\n;\n    NGa(NGm,r) = NGpriceCap(NGm,'pipe',r)*0.8+NGb(NGm,r)*NGdemand(NGm,r)\n;\n\n\n$ontext\n==========Data description===========\n1.unit of price cap: mm$/bcm ;\n2.add pipeline length;\n\n$offtext\n\n\n*previous trial data\n$ontext\n* Dummy Data\n    NGpartner(NGi,NGs)$(ord(NGi)=1)=0.5;\n    NGpartner(NGi,NGs)$(ord(NGi)=2)=0.5;\nloop(r$rc(r,'china'),\n    NGpriceCap(NGm,NGw,r) =5;\n\n    NGomCost(NGt,NGs,r)= (ord(NGs))**ord(NGs);\n\n    NGimportPrice('LNG',r) = 1000;\n    NGcapitalCost(NGt,NGs,r)= ord(NGs);\n\n    NGplateau(NGs,r) = 1/ord(NGs);\n    NGdemand(NGm,\"Beijing\") = sum((NGt,NGs),NGplateau(NGt,NGs,r));\n\n    NGquota(NGi,NGm,NGW,r)=NGdemand(NGm,r)*0.1/card(NGi);\n    loop((NGi,rr)$NGregasLim\nNGconnect(NGi,r,rr),\n\n        NGtransCost(NGw)(NGw,r,rr) = 1;\n        NGtransexist(NGi,r,rr)$NGregasLim\nNGconnect(NGi,r,rr) = 1e3;\n        loop(NGii,\n            NGtransCost(NGw)(NGw,r,rr)$NGregasLim\nNGconnect(NGii,r,rr) = 1;\n        );\n        NGtransOM(NGw,r,rr)=2;\n\n\n    );\n);\n$offtext\n",
			"file": "src/data/natgas.gms",
			"file_size": 7154,
			"file_write_time": 131647113367200993,
			"settings":
			{
				"buffer_size": 6915,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "git status",
		"selected_items":
		[
			[
				"git status",
				"Git: Status"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git stash",
				"Git: Stash Apply"
			],
			[
				"git ",
				"Git: Toggle Annotations"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git fetch",
				"Git: Fetch"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"github",
				"Github: History"
			],
			[
				"git",
				"Git: Track Remote Branch"
			],
			[
				"",
				"Gams: Switch between code and listing"
			],
			[
				"gams",
				"Gams: Switch between code and listing"
			],
			[
				"repo",
				"Github: Repository"
			],
			[
				"print",
				"Package Control: Install Package"
			],
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"package Control: ",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"compare",
				"Compare selections"
			],
			[
				"com",
				"Plugin Development: Convert Syntax to .sublime-syntax"
			]
		],
		"width": 432.0
	},
	"console":
	{
		"height": 209.0,
		"history":
		[
			"git",
			"git stash"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/willbj0b/github/KEM_EMP",
		"/C/Users/willbj0b/github/KEM_EMP/src",
		"/C/Users/willbj0b/github/KEM_EMP/src/data",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations",
		"/C/Users/willbj0b/github/KEM_EMP/tools",
		"/C/Users/willbj0b/github/KEM_EMP/trash"
	],
	"file_history":
	[
		"/C/Users/willbj0b/github/KEM_EMP/src/data/petchem.gms",
		"/C/Users/willbj0b/github/KEM_EMP/trash/solve_recursive.gms",
		"/C/Users/willbj0b/github/KEM_EMP/KEM_China.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/natgasmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/data/water.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/emissions.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/coal.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/water.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/power.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/variables/natgas.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/data/fuel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/KEM_China.sublime-project",
		"/C/Users/willbj0b/github/KEM_EMP/.git/COMMIT_EDITMSG",
		"/C/Users/willbj0b/github/KEM_EMP/src/sets/power.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/share/data.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/sets/refinery.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/sets/coal.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/petchemsubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/watersubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/sectorsInit.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/powersubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/refiningsubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/share/linkingVariables.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/variables/power.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/fuelsubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/share/sets.gms",
		"/C/Users/willbj0b/github/KEM_EMP/tools/discounting.gms",
		"/C/Users/willbj0b/github/KEM_EMP/tools/macros.gms",
		"/C/Users/willbj0b/github/KEM_EMP/decisionFlags.gms",
		"/C/Users/willbj0b/github/KEM_EMP/KEM_EMP.sublime-workspace",
		"/C/Users/willbj0b/github/KEM_EMP/KEM_China.sublime-workspace",
		"/C/Users/willbj0b/github/KEM_EMP/KEM_EMP.bat",
		"/C/Users/willbj0b/github/KEM_EMP/KEM_EMP.sublime-project",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/transmissionsubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/future_integration/sector_power_residential.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/coalsubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/cementsubmodel.gms",
		"/C/Users/willbj0b/github/KEM_EMP/build/dict.txt",
		"/C/Users/willbj0b/github/KEM_EMP/KEM_EMP.gms",
		"/C/Users/willbj0b/github/KEM_EMP/src/data/power.gms",
		"/C/Users/willbj0b/github/KEM_EMP/GAMS_PARM.prm",
		"/C/Users/willbj0b/github/KEM_EMP/.gitignore",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/KEM_China",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGquota.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGtransexistlen.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGrIPipe.inc",
		"/C/Users/willbj0b/github/KEM_EMP/src/data/query/natgas.gms",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGrILng.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/r.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGstatus.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGs.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGpriceCap.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGregasCapitalCost.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGomCost.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGpartner.inc",
		"/C/Users/willbj0b/github/KEM_EMP/build/data/NGcapitalCost.inc",
		"/C/Users/willbj0b/github/KEM_EMP/src/equations/natgasmodel.lst",
		"/C/Users/willbj0b/github/KEM_EMP/.git/MERGE_MSG",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/query/power.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/query/ACCESS_sets.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/.gitignore",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/natgas.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/.git/COMMIT_EDITMSG",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/natgasmodel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/powersubmodel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/natgas.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/sets/natgas.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/dict.txt",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/decisionFlags.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/share/sets.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/share/linkingVariables.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/sectorsInit.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/fuel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/water.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/petchem.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/petchem.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/water.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/refinery.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/refinery.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/fuel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/coal.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/coal.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/cement.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/cement.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/variables/power.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/power.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/coalsubmodel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/sets/coal.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/KEM_EMP.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/petchemsubmodel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/08032017_11-32-51.07/dict.txt",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/share/data.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/08032017_11-39-29.42/dict.txt",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/trash/power_ksa.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/cementsubmodel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/dynamicSets/power.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/sets/power.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/query/ACCESS_HLC.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/query/ACCESS_EL.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/share/sets.~gm",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/test.gdx",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/data/query/ACCESS_CO.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/db/coal_tables.accdb",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/tools/discounting.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/tools/maxecongain.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/tools/projections.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/tools/subsidygrid_loop.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/trash/Integratedmodel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/trash/solve_LP.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/tools/solve_subsidygrid.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/trash/solve_recursive.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/trash/solve_MCP_in_recursion.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/trash/solve_MCP.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/08012017_17-43-42.89/dict.txt",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/share/decisionFlags.gms",
		"/C/Users/willbj0b/AppData/Roaming/Sublime Text 3/Packages/Terminal/Default (Windows).sublime-keymap",
		"/C/Users/willbj0b/AppData/Roaming/Sublime Text 3/Packages/Terminal/Terminal.sublime-settings",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/fuelsubmodel.gms",
		"/C/Users/willbj0b/AppData/Roaming/Sublime Text 3/Packages/User/Terminal.sublime-settings",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/07262017_17-00-12.03/KEM_EMP.lst",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/07262017_16-55-54.60/KEM_EMP.lst",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/watersubmodel.gms",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/07262017_15-28-59.35/KEM_EMP.log",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/07262017_14-39-02.95/KEM_EMP.log",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/src/equations/cementsubmodel.~gm",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/build/07252017_15-09-08.51/KEM_EMP.gdx",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/path.opt",
		"/D/Dropbox (KAPSARC)/ES- KEM/KEM_EMP/tools/optionFiles/jams.opt"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 96.0,
		"where_history":
		[
			"C:\\Users\\willbj0b\\github\\KEM_EMP\\,*.gms",
			"C:\\Users\\willbj0b\\github\\KEM_EMP\\src/sets,*.gms",
			"C:\\Users\\willbj0b\\github\\KEM_EMP\\,*.gms",
			"C:\\Users\\willbj0b\\github\\KEM_EMP\\,.gms",
			"C:\\Users\\willbj0b\\github\\KEM_EMP\\",
			"*.gms,C:\\Users\\willbj0b\\github\\KEM_EMP\\",
			"*.gms,C:\\Users\\willbj0b\\github\\KEM_EMP\\src",
			"*.gms",
			"C:\\Users\\willbj0b\\github\\KEM_EMP\\src",
			"",
			"<open files>",
			"*.gms,,<open files>",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src\\data,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src\\data",
			"<open files>",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src",
			"",
			"<open files>",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\,*.gms,<open files>",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src\\data,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\data,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\,*.gms",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP",
			"",
			"D:\\Dropbox (KAPSARC)\\ES- KEM\\KEM_EMP\\src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"elpp",
			"WAcapfac",
			"COobjective_CFS",
			"ELCOconsump",
			"ELCOconsump_fgc",
			"ELCOconsump",
			"Del",
			"TRELprice",
			"Trdem",
			"fdem",
			"Dfdem",
			"fueluse",
			"ftransyiled",
			"ftrans",
			"fueluse",
			"NGstatus",
			"ELcapavail",
			"fuelcst",
			"ELcaplim",
			"ELtransbld",
			"ELop",
			"Gcond",
			"MTBE",
			"ethylene",
			"naphtha",
			"ngl",
			"WAleadtime",
			"WAleadtime(",
			"t_ind",
			"COsulfur",
			"Sulf",
			"SubcrSML",
			"prop",
			"ELlchours",
			"ELhours",
			"ELlhours",
			"clc",
			"cmc",
			"ELfuelcons",
			"call",
			"c",
			"call",
			"ELfconsump.",
			"ELfuelprice",
			"ELop",
			"DRFDEM_l",
			"ELfconsump",
			"call",
			"ELFconsump",
			"ELfconsump",
			"ELFconsump",
			"ELfconsump",
			"ELfconsump.",
			"ELfconsump",
			"ELfconsump.",
			"ELfconsump",
			"ELfconsump.",
			".fx",
			"Equations",
			".fx",
			"\\",
			".fx",
			"ELfconsump.fx",
			"ELfconsump",
			"ELop",
			"ELavail",
			"TRELconsump.fx",
			".fx",
			"ELheatstorage",
			"ELop",
			"ELcaplim",
			"ELAPf",
			"DELsup",
			"ELAPf",
			"ELavail",
			"e3024",
			"WAELconsump",
			"WAELsupply",
			"e3603",
			"call",
			"fueluse",
			"x612",
			"dx612",
			"dL_dx584",
			"idir",
			"KEM_EMP",
			"NGpriceCap",
			"NGwR",
			");\n",
			"NGimport",
			"firminfo",
			"NGimportEqn",
			"NGwr",
			"NGwR(NGw,r)",
			"NGwR",
			"NGimportPrice",
			"NGimportPrice(NGw)",
			"NGimportEqn(NGi,r)",
			"NGimportEqn",
			"NGimportContract(NGi,r)",
			"NGimportContract(NGi)",
			"NGimportContract",
			"NGimportContract(r)",
			"NGimportContract",
			"(NGi,NGt,NGw)",
			"NGtw(NGi,NGt,NGw)",
			"NGtw(NGt,NGw)",
			"NGop",
			"rc",
			"NGp",
			"NGp_",
			"NGp(NGi,r)",
			"NGRegasLim",
			"NGp_f",
			"NGp(NGi,r)",
			"NGp",
			"NGcapitalCostLiq",
			"NGimportEqn(r)",
			"NGtransle",
			"NGtrans",
			"NGc",
			"NGtrans",
			"NGstatus",
			"NGregasLim",
			"NGc",
			"NGconnecti",
			"limit",
			"NGbld"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"dummyf",
			"KEM_China",
			"NGiwR",
			"empinfo",
			"NGwR(NGi,NGw,r)",
			"NGimportPrice(NGi,NGw)",
			"NGimportEqn(NGi,NGw)",
			"NGimportContract(NGi,NGw)",
			"NGimportContract(NGi)",
			"NGimportContract(NGi,r)",
			"NGtw(NGi,NGt,NGw)",
			"NGp_firm(NGi,r)",
			"NGregasLim\nNGp_firm(NGi,r)",
			"NGregasLim\nNGimportEqn(NGi,r)",
			"NGregasLim\nNGconnect",
			"NGregasLim",
			".pipe.",
			"firminfo",
			"pipe(NGw)",
			"NGplateau",
			"NGtransMV",
			"NGp(NGi,r)",
			"NGdem(NGi,r)",
			"NGtransP(NGi,NGii,r,rr)",
			"NGtransPricEqn(NGi,NGii,r,rr)",
			"NGconnecti(NGi,r,rr)",
			"NGconnecti(NGii,r,rr)",
			"NGtransOM",
			"NGtransCost(NGw)",
			"NGdem(NGi,NGm,r)",
			"NGp(NGi,NGm,r)",
			"NGtransOM(NGw)",
			"NGdem(NGi,NGm,r)",
			"NGp(NGi,r)",
			"NGobjective(NGi)",
			"NGdem(NGi,r)",
			"NGdem(r)",
			"NGp(NGm,r)",
			"NGz(NGm,NGw,r)",
			"NGpriceCapSlack(NGm,NGw,r)",
			"NGpriceCapSlack(NGm,NGw,r)$",
			"NGdem(NGm,r)",
			"NGprice(NGi,NGm,r)",
			"NGpriceEqn(NGi,NGm,r)",
			"NGprice(NGm,r)",
			"NGpriceEqn(NG,NGm,r)",
			"NGsup(NGw,r)",
			"NGz(NGi,NGm,NGw,r)",
			"NGdem(NGm,r)",
			"NGz(NGm,NGw,r)",
			"NGp(NGm,r)",
			"NGquota(NGi,NGm,NGW,r)",
			"NGobjval",
			"NGsup",
			"NGp(NGi,NGw,r)",
			"NGsup",
			"NGcapitalCost(NGt,NGs,r)",
			"NGcapitalCostLiq",
			"NGcapitalCost(NGs,NGt,r)",
			"NGtransOM(NGw,r,rr)",
			"NGts(NGt,NGs,r)",
			"put",
			"NGshareEQn(NGi,NGs)",
			"NGquotaEqn(NGi,NGm,NGw,r)",
			"NGpriceCapSlack(NGi,NGm,NGw,r)",
			"NGtransTariff(NGw,r,rr)",
			"NGcapitalCostLiq(NGs,r)",
			"COss",
			"COs",
			"NGcapHorizon(NGi,NGt,NGs,r)",
			"NGhorizon(NGt,NGs,r)",
			"NGcaplim(NGi,NGt,NGs,r).",
			"NGbld(NGi,NGt,NGs,r)",
			"NGop(NGi,NGt,NGs,NGw,r)",
			"NGdem",
			"NGtransCapLim",
			"NGtransSup",
			"NGtransCapLim",
			"NGcapHorizon",
			"NGcaphorizon",
			"NGcaplim",
			"NGquotaEqn",
			"NGpriceCapSlack",
			"NGinverseDemand",
			"NGomCost",
			"NGp",
			"EQ_dem(NGi,NGm,r)",
			"NGtransexist(NGi,r,rr)",
			"NGop(NGi,NGs,NGw,r)",
			"EQ2_7(NGw,NGi,r,rr)",
			"NGc(NGi,NGw,NGii,r,rr)",
			"NGc(NGii,NGw,NGi,r,rr)",
			"NGtrans(NGii,NGw,NGi,r,rr)",
			"NGtrans(NGi,NGw,NGii,r,rr)",
			"NGc(NGi,NGw,NGii,r,rr)",
			"NGconnect(NGi,r,rr)",
			"NGii,NGw,r,rr",
			"NGtrans(NGi,NGii,NGw,r,rr)",
			"NGtransexist(NGi,NGw,r,rr)",
			"NGtransOM(r,rr)",
			"NGii,NGw,r,rr",
			"NGtrans(NGi,NGw,r,rr)",
			"NGtransexist(NGw,r,rr)",
			"NGtrans(NGii,NGw,r,rr)",
			"NGtransexist(r,rr)",
			"EQ2_7(NGi,NGw,r,rr)",
			"EQ2_6(NGi,NGw,r)",
			"EQ2_5(NGi,NGs,r)",
			"EQ2_4(NGi,NGs,r)",
			"EQ2_3(NGi,NGw,r)",
			"EQ2_2(NGi,NGw,r)",
			"",
			"NGsupplyQ",
			"EQ2_1(NGi,NGw,r)",
			"NGsupply(NGi,NGm,NGw,r)",
			"p(NGi,NGm,r)",
			"NGww",
			"NGw",
			"NGii",
			"NGi",
			"NGz(NGi,NGm,NGw,r)",
			"z(NGi,NGm,NGw,r)",
			"NGbld(NGi,NGs,r)",
			"NGsupply(NGi,NGm,NGw,r,)",
			"NGsupplyR(NGi,NGm,NGw,r)",
			"NGbld(NGi,r,NGs)",
			"NGsupplyR(NGi,NGm,r)",
			"NGquota(NGi,NGm,r)"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/equations/natgasmodel.gms",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11269,
						"regions":
						{
						},
						"selection":
						[
							[
								11173,
								11173
							]
						],
						"settings":
						{
							"syntax": "Packages/GAMS language/Gams.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5412.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/equations/power.gms",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24934,
						"regions":
						{
						},
						"selection":
						[
							[
								10044,
								10044
							]
						],
						"settings":
						{
							"syntax": "Packages/GAMS language/Gams.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4229.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/data/natgas.gms",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6915,
						"regions":
						{
						},
						"selection":
						[
							[
								1995,
								1995
							]
						],
						"settings":
						{
							"syntax": "Packages/GAMS language/Gams.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 484.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "KEM_China.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pipe",
				"KEM_EMP.sublime-project"
			],
			[
				"git",
				".gitignore"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 302.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
